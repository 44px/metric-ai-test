{"version":3,"sources":["balance/timeline.ts","balance/Chart.tsx","ui/DatePicker.tsx","ui/Button.tsx","App.tsx","index.tsx"],"names":["updateBalance","balance","transaction","accountsUpdate","account","amount","type","safeSum","accounts","destinationAccount","destinationAmount","total","Object","values","reduce","date","Date","parse","a","b","Chart","data","className","width","aspect","margin","top","left","right","bottom","dataKey","stroke","strokeDasharray","labelFormatter","formatDate","formatter","value","formatAmount","scale","domain","tickFormatter","minTickGap","tickMargin","interval","y","time","toLocaleDateString","fractionDigits","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","DatePicker","onChange","today","format","parseDate","placeholder","dayPickerProps","disabledDays","after","onDayChange","DateUtils","isDate","parsed","dateFormat","Button","children","onClick","GET_TRANSACTIONS","gql","initialDate","subDays","App","useState","fromDate","setFromDate","useQuery","variables","notifyOnNetworkStatusChange","loading","error","refetch","networkStatus","balanceTimeline","transactions","length","startBalance","currentBalance","newBalance","slice","getBalanceTimeline","isLoading","NetworkStatus","message","client","ApolloClient","uri","process","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af395cbd.chunk.js","sourcesContent":["type Transaction = SingleAccountTransaction | Transfer;\n\ninterface SingleAccountTransaction {\n  date: string;\n  type: 'BALANCE_ADJUSTMENT' | 'INCOME' | 'EXPENSE';\n  account: string;\n  amount: number;\n  destinationAccount: null;\n  destinationAmount: null;\n}\n\ntype Transfer = Pick<\n  SingleAccountTransaction,\n  'date' | 'account' | 'amount'\n> & {\n  type: 'TRANSFER';\n  destinationAccount: string;\n  destinationAmount: number;\n};\n\ntype BalanceByAccount = Record<string, number>;\n\nexport interface Balance {\n  date: number;\n  total: number;\n  accounts: BalanceByAccount;\n}\n\nexport const getBalanceTimeline = (transactions: Transaction[]): Balance[] => {\n  if (transactions.length === 0) {\n    return [];\n  }\n\n  const startBalance = {\n    date: Date.parse(transactions[0].date),\n    total: 0,\n    accounts: {},\n  };\n  return transactions.reduce(\n    (balanceTimeline, transaction) => {\n      const currentBalance = balanceTimeline[balanceTimeline.length - 1];\n      const newBalance = updateBalance(currentBalance, transaction);\n\n      if (newBalance.date !== currentBalance.date) {\n        return [...balanceTimeline, newBalance];\n      }\n\n      return [\n        ...balanceTimeline.slice(0, balanceTimeline.length - 1),\n        newBalance,\n      ];\n    },\n    [startBalance],\n  );\n};\n\nconst updateBalance = (balance: Balance, transaction: Transaction): Balance => {\n  let accountsUpdate: BalanceByAccount = {};\n  const { account, amount } = transaction;\n  if (transaction.type === 'BALANCE_ADJUSTMENT') {\n    accountsUpdate = { [account]: amount };\n  } else if (transaction.type === 'INCOME' || transaction.type === 'EXPENSE') {\n    accountsUpdate = { [account]: safeSum(balance.accounts[account], amount) };\n  } else if (transaction.type === 'TRANSFER') {\n    const { destinationAccount, destinationAmount } = transaction;\n    accountsUpdate = {\n      [account]: safeSum(balance.accounts[account], amount),\n      [destinationAccount]: safeSum(\n        balance.accounts[destinationAccount],\n        destinationAmount,\n      ),\n    };\n  }\n\n  const accounts = { ...balance.accounts, ...accountsUpdate };\n  const total = Object.values(accounts).reduce(safeSum, 0);\n  return {\n    date: Date.parse(transaction.date),\n    accounts,\n    total,\n  };\n};\n\n// safeSum allows to reduce floating point errors\nconst safeSum = (a: number, b: number) => {\n  return (a * 100 + b * 100) / 100;\n};\n","import React from 'react';\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { Balance } from './timeline';\nimport './Chart.css';\n\ninterface Props {\n  data: Balance[];\n}\n\nexport const Chart: React.FunctionComponent<Props> = ({ data }) => {\n  return (\n    <ResponsiveContainer className=\"Chart\" width=\"100%\" aspect={1.8}>\n      <LineChart margin={{ top: 8, left: 4, right: 16, bottom: 8 }} data={data}>\n        <Line type=\"linear\" dataKey=\"total\" />\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n        <Tooltip\n          labelFormatter={formatDate}\n          formatter={(value) => formatAmount(value as number, 2)}\n        />\n        <XAxis\n          dataKey=\"date\"\n          type=\"number\"\n          scale=\"time\"\n          domain={['dataMin', 'dataMax']}\n          tickFormatter={formatDate}\n          minTickGap={16}\n          tickMargin={4}\n          interval=\"preserveStartEnd\"\n        />\n        <YAxis\n          type=\"number\"\n          interval=\"preserveStartEnd\"\n          tickFormatter={formatAmount}\n        />\n        <ReferenceLine y={0} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst formatDate = (time: number | string) => {\n  return new Date(time).toLocaleDateString();\n};\n\nconst formatAmount = (amount: number, fractionDigits = 0) => {\n  return amount.toLocaleString(undefined, {\n    minimumFractionDigits: fractionDigits,\n    maximumFractionDigits: fractionDigits,\n  });\n};\n","import React from 'react';\nimport { parse, format } from 'date-fns';\nimport { DateUtils } from 'react-day-picker';\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\nimport './DatePicker.css';\n\ninterface Props {\n  value: string;\n  onChange: (value: string) => any;\n}\n\nconst FORMAT = 'yyyy-MM-dd';\n\nexport const DatePicker: React.FunctionComponent<Props> = ({\n  value,\n  onChange,\n}) => {\n  const onDayChange = (date: Date) => {\n    if (DateUtils.isDate(date)) {\n      onChange(`${format(date, FORMAT)}`);\n    }\n  };\n  const today = new Date();\n\n  return (\n    <DayPickerInput\n      value={value}\n      format={FORMAT}\n      parseDate={parseDate}\n      formatDate={formatDate}\n      placeholder={`${format(today, FORMAT)}`}\n      dayPickerProps={{\n        disabledDays: {\n          after: today,\n        },\n      }}\n      onDayChange={onDayChange}\n    />\n  );\n};\n\nconst parseDate = (date: string, format: string) => {\n  const parsed = parse(date, format, new Date());\n  return DateUtils.isDate(parsed) ? parsed : undefined;\n};\n\nconst formatDate = (date: Date, dateFormat: string) => {\n  return format(date, dateFormat);\n};\n","import React from 'react';\nimport './Button.css';\n\ninterface Props {\n  onClick: () => any;\n}\n\nexport const Button: React.FunctionComponent<Props> = ({\n  children,\n  onClick,\n}) => {\n  return (\n    <button className=\"Button\" type=\"button\" onClick={onClick}>\n      {children}\n    </button>\n  );\n};\n","import React, { useState } from 'react';\nimport { format, subDays } from 'date-fns';\nimport { gql, NetworkStatus } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport { getBalanceTimeline } from './balance/timeline';\nimport { Chart } from './balance/Chart';\nimport { DatePicker } from './ui/DatePicker';\nimport { Button } from './ui/Button';\nimport './App.css';\n\nconst GET_TRANSACTIONS = gql`\n  query GetTransactions($fromDate: String!) {\n    transactions(fromDate: $fromDate) {\n      date\n      type\n      account\n      amount\n      destinationAccount\n      destinationAmount\n    }\n  }\n`;\n\nconst initialDate = format(subDays(new Date(), 7), 'yyyy-MM-dd');\n\nfunction App() {\n  const [fromDate, setFromDate] = useState(initialDate);\n  const { loading, error, data, refetch, networkStatus } = useQuery(\n    GET_TRANSACTIONS,\n    {\n      variables: { fromDate },\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const balanceTimeline = getBalanceTimeline(data?.transactions || []);\n  const isLoading = loading || networkStatus === NetworkStatus.refetch;\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__toolbar\">\n        <div className=\"App__toolbar-element\">\n          <span className=\"App__toolbar-label\">Show balance from date:</span>\n          <DatePicker value={fromDate} onChange={setFromDate} />\n        </div>\n        <div className=\"App__toolbar-element\">\n          <Button onClick={() => refetch()}>Refresh</Button>\n        </div>\n      </div>\n      <div className=\"App__view\">\n        {isLoading && (\n          <div className=\"App__overlay\">\n            <div className=\"App__overlay-title\">Loading</div>\n            <div className=\"App__loader\">&nbsp;</div>\n          </div>\n        )}\n        {error && (\n          <div className=\"App__overlay\">\n            <div className=\"App__overlay-title\">Error</div>\n            <span>{error.message}</span>\n          </div>\n        )}\n        <Chart data={balanceTimeline} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport './index.css';\nimport App from './App';\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_API_URI,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}